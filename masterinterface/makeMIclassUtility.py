__author__ = 'asaglimbeni'



class Method:

    """
        Load operation of wsdl with input and output arguments.
    """

    input=[]
    output=[]

    def __init__(self,name, input=None, output=None):
        """
            Init method class
        """
        if not input: input = []
        if not output: output = []
        self.input=input
        self.output=output
        self.name=name

    def __str__(self):
        """
            Print method object
        """

        s=""+self.name+"("
        s+=str(self.input)+") Return:["
        s+=str(self.output)
        s+="]"
        return s
    def appendInput(self,input):

        """
            add new input arg
        """

        self.input.append(input)

    def appendOutput(self,output):

        """
            add new output arg
        """

        self.output.append(output)

class Types:

    """
        Load types of wsdl

    """

    # types dictionary
    types={}


    def __init__(self,wsdl):
        """
            Init types object with wsdl (is a suds client istance)
        """
        self.wsdl=wsdl

    def isSimpleType(self,type):

        """
            check if type is a simple type
            # add new simple type to better performance
        """

        if type in ['string','int','integer','bool','float','dateTime','boolean','decimal','date','time']:
            return True
        return False


    def appendType(self,name,type):

        """
            Add new type

        """

        if self.isSimpleType(type):
            self.types[name]=type
        else:
            Complex=self.wsdl.factory.resolver.find(type)
            self.types[Complex.name]=[]
            for btype, ptype in Complex:
                self.types[Complex.name].append(self.process(btype.name,btype.type[0]))

    def process(self,name,type):

        """
            Process complex type
        """

        if self.isSimpleType(type):
            return [name,type]
            #self.Elem(name,type)
        else:
            Complex=self.wsdl.factory.resolver.find(type)
            self.appendType(Complex.name,Complex.name)
            return [name,type]
            #subc= {Complex.name: []}
            #for btype, ptype in Complex:
            #    subc[Complex.name].append(self.process(btype.name,btype.type[0]))
            #return subc

    def getType(self,typeName):

        """
            Return corresponding typeName form dictionary
        """

        return self.types[typeName]


    def __print__(self,typ):

        if isinstance(typ,type('')):
            return typ
        if isinstance(typ,type(unicode())):
            return typ
        if isinstance(typ,type([])):
            s="\n"
            for t in typ:
                s+=self.__print__(t)+"\n"
            s+=""
            return s
        if isinstance(typ,type({})):
            s=""
            for k,t in typ.iteritems():
                s+="("+k+"){\n  "
                s+=""+self.__print__(t)+"\n }\n"
            return s


    def __str__(self):

        """
            Print type object.
        """

        s="Type:\n"
        for k,t in self.types.iteritems():
            s+="("+k+"){\n  "
            s+=self.__print__(t)+"\n }\n"
        return s

####################
#### Start Template section
####################

class models_template:


    imports="""
# Automatically generated by SCS Service Interface Generator

from django.db import models
from django.utils.translation import ugettext_lazy as _
from masterinterface.scs.config import CharField_max_length
    """

    modelclass="""
class {MethodNameRequestType}(models.Model):

    """

    element="""
    {ElementName} = models.{ElementType}Field(_('{ElementName}'), null=False, max_length=CharField_max_length)
    """

    complexElement="""
    {ElementName} = models.ForeignKey('{ElementType}')
    """
    modelsResult=""

    def __init__(self):
        """
        """
        self.modelsResult+=self.imports

    def __addElemtn(self, Element):

        if type(Element)==type([]):
            for element,Type in Element:
                self.modelsResult+=self.element.format(ElementName=element, ElementType=Type)


        if type(Element)==type({}):
            for element,Type in Element.iteritems:
                self.modelsResult+=self.element.format(ElementName=element, ElementType=Type)

    def isStadardFiled(self,fieldType):
        if fieldType in ['string','int','integer','bool','float','dateTime','boolean','decimal','date','time']:
            return True
        return False

    def addType(self, TypeName, ElementsName ):
        """
        """
        self.modelsResult+=self.modelclass.format(MethodNameRequestType=TypeName)

        for element,Type in ElementsName:
            if self.isStadardFiled(Type):
                self.modelsResult+=self.element.format(ElementName=element, ElementType='Char')
            else:
                self.modelsResult+=self.complexElement.format(ElementName=element, ElementType=Type)

    def getModelResult(self):

        return self.modelsResult

class forms_template:
    """"""

    imports="""
# Automatically generated by SCS Service Interface Generator

from django import forms
    """

    importModelType="""
from models import {MethodNameRequestType}
"""

    form_method="""
class {MethodName}Form( forms.ModelForm):
    \"\"\" {MethodName} request form \"\"\"

    class Meta:
"""

    model="""
        model = {MethodNameRequestType}
    """

    formsResult=""

    def __init__(self):
        """
        """

    def addForm(self,methodName, modelTypes):
        self.formsResult+=  self.form_method.format(MethodName=methodName)

        for methodNameRequestType in modelTypes:
            self.imports+=self.importModelType.format(MethodNameRequestType=methodNameRequestType)
            self.formsResult+=self.model.format(MethodNameRequestType=methodNameRequestType)

    def getFormsResult(self):
        return self.imports+self.formsResult

class views_template:
    """"""
    imports="""
# Create your views here.

import inspect
import sys

from django.shortcuts import render_to_response
from django.views.generic.base import View
from django.template import RequestContext
from masterinterface.scs.services import invokeSoapService
from masterinterface.scs.permissions import check_sample_permission, login_required
    """

    imports_forms_modules="""
from forms import {MethodName}Form
from models import {MethodName} as {MethodName}RequestType
from models import {MethodName}Response as {MethodName}ResponseType
    """

    viewMethodClass="""
class {MethodName}(View):
    \"\"\" {MethodName} View Class
    \"\"\"

    template_name = '{ServiceName}/{MethodName}.html'
    action_url = '/{ServiceName}/{MethodName}/'
    wsdl_url = '{WsdlURL}'
    method = '{MethodName}'
    service = '{ServiceName}'
    port = '{PortName}'
    requestType = {MethodName}RequestType
    responseType = {MethodName}ResponseType

    def get(self, request):
        \"\"\" get the form page to send the request \"\"\"

        form = {MethodName}Form()

        return render_to_response(
            self.template_name,
                {{ 'title':'{MethodName} form',
                  'form' : form,
                  'action': self.action_url,
                  'results': None}},
            context_instance=RequestContext(request)
        )

    # your permission control goes here
    @check_sample_permission
    def post(self, request):
        \"\"\" validate form and post request to the service \"\"\"

        # check form validation
        form = {MethodName}Form( request.POST, request.FILES)

        if form.is_valid():

            # invoke service
            result = invokeSoapService(
                self.wsdl_url,
                self.service,
                self.port,
                self.method,
                form.cleaned_data,
                self.requestType,
                self.responseType
            )

            return render_to_response(
                self.template_name,
                    {{ 'title':'{MethodName} form',
                      'form' : {MethodName}Form(),
                      'action': self.action_url,
                      'statusmessage': 'Action Performed',
                      'result': result }},
                context_instance=RequestContext(request)
            )


        # form validation failed
        errormessage = 'Error while validating form'

        return render_to_response(
            self.template_name,
                {{ 'title':'{MethodName} form',
                  'form' : {MethodName}Form(),
                  'action': self.action_url,
                  'errormessage': errormessage,
                  'results': None}},
            context_instance=RequestContext(request)
        )
    """
    indexView="""
def index(request):
    \"\"\" default view with list of available service methods
    \"\"\"
    methods = []
    for name, obj in inspect.getmembers(sys.modules[__name__]):
        if inspect.isclass(obj):
            if str(obj.__bases__).count('View'):
                methods.append(name)

    return render_to_response('{ServiceName}/index.html',
            {{'methods':methods}},
        context_instance=RequestContext(request)
    )
"""
    viewResult=""

    def __init__(self,ServiceName):
        """
        """
        self.viewResult+=self.indexView.format(ServiceName=ServiceName)

    def addView(self,ServiceName, MethodName,PortName,wsdl_url):
        self.imports+=self.imports_forms_modules.format(MethodName=MethodName)
        self.viewResult+=self.viewMethodClass.format(MethodName=MethodName,ServiceName=ServiceName,PortName=PortName,WsdlURL=wsdl_url)
        ###TODO
        ### COMPLETE CLASS: MORE SERVICE CASE.

    def getViewResult(self):
        return self.imports+self.viewResult

class baseHtml_template:
    """"""

    baseHtml="""
<!-- Automatically generated by SCS Service Interface Generator -->

{{% extends 'base.html' %}}

{{% block title %}}
    Welcome to {ServiceName}
    <!-- the page tile goes here -->
{{% endblock %}}

{{% block extrahead %}}
    <!-- your styles, javascript and whatever you want to put into the page header go here -->
{{% endblock %}}

{{% block content %}} {{% endblock %}}
    """

    baseHtmlResult=""

    def __init__(self):
        """
        """


    def addBaseHtml(self,ServiceName):

        self.baseHtmlResult+= self.baseHtml.format(ServiceName=ServiceName)


    def getBaseHtmlResult(self):

        return self.baseHtmlResult

class serviceHtml_Template:
    """
    """
    name =[]

    service_extends="""
<!-- Automatically generated by SCS Service Interface Generator -->

{{% extends '{ServiceName}/base.html' %}}
"""
    serviceHtml="""

{% block title %}
    {{ title }}
    <!-- the page tile goes here -->
{% endblock %}


{% block content %}

    <!-- render request form -->
    <p> Fill the form below to submit the request:</p>

    <form action="{{ action }}" method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form.as_ul }}
        <input type="submit" name="submit" value="submit" />
    </form>

    <br />

    {% if result %}
        <!-- show results here -->
        <p>{{ result }}</p>
    {% endif %}

{% endblock %}

    """



    def __init__(self,serviceName):
        """

        """
        self.serviceHtml=self.service_extends.format(ServiceName=serviceName)+self.serviceHtml


    def addServiceHtml(self,name):
        self.name.append(name)


    def getServiceHtml(self):
        return self.serviceHtml


class Urls_Template:
    """
    """

    imports="""
from django.conf.urls.defaults import patterns, url, include
    """

    importsView="""
from views import {methodName}
    """
    patterns="""
urlpatterns = patterns('{serviceName}.views'"""

    urls=""",
    url(r'^{methodName}/', {methodName}.as_view() )"""

    urlsResult=""
    patternsResult=""

    def __init__(self,serviceName):
        """

        """
        self.patternsResult=self.patterns.format(serviceName=serviceName)

    def addUrl(self,methodName):
        self.imports+=self.importsView.format(methodName=methodName)
        self.patternsResult+=self.urls.format(methodName=methodName)



    def getUrl(self):
        return self.imports+self.patternsResult+',\n    url(r\'\',\'index\')\n)'


class indexHtml_Template:
    """
    """

    indexHtml="""
{{% extends '{ServiceName}/base.html' %}}

{{% block content %}}

    <h4>{ServiceName} Available Methods</h4>
    <p>Below are listed the available methods for {ServiceName} Service</p>
    <ul>
        {{% for method in methods %}}
            <li><a href="/{ServiceName}/{{{{ method }}}}/"><span>{{{{ method }}}}</span></a></li>
        {{% endfor %}}
    </ul>

{{% endblock %}}
    """

    indexHtmlResult=""

    def __init__(self,serviceName):
        """

        """
        self.indexHtmlResult=self.indexHtml.format(ServiceName=serviceName)



    def getIndexHtml(self):
        return self.indexHtmlResult





####################
#### END Template section
#####################